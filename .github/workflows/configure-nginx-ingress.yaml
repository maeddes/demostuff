name: nginx Ingress

on:
  workflow_dispatch: 
    inputs:
      k8sName:
        description: k8sname
        required: true
        type: string
        default: 'abc'

      argocd:
        description: ArgoCD
        required: true
        type: boolean
        default: false
      
      hubble:
        description: Cilium Hubble
        required: true
        type: boolean
        default: true

      cilium:
        description: Cilium Grafana
        required: true
        type: boolean
        default: false

      testkube:
        description: Testkube
        required: true
        type: boolean
        default: true

      otel:
        description: OpenTelemetry
        required: true
        type: boolean
        default: true

      dqualizer:
        description: dqualizer
        required: true
        type: boolean
        default: false

      ocelot:
        description: ocelot
        required: true
        type: boolean
        default: false

jobs: 
  configure-ingress:
    runs-on: ubuntu-latest
    steps:
    - name: Echo Something
      run: | 
        echo "Hello, Welt!"
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'

    - name: Display az cli version
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az version

    - name: Get Context
      uses: azure/aks-set-context@v3
      with:
        resource-group: mhsrg-${{ github.event.inputs.k8sName }}
        cluster-name: mhs-${{ github.event.inputs.k8sName }}

    - name: Configure ArgoCD
      if: ${{ github.event.inputs.argocd }}
      continue-on-error: true
      run: |
        echo not yet solved

    - name: Configure Istio Stuff
      if: ${{ github.event.inputs.istio }}
      continue-on-error: true
      run: |

        export INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        export INGRESS_DOMAIN=${INGRESS_HOST}.nip.io

        

    - name: Configure Hubble Stuff
      if: ${{ github.event.inputs.hubble }}
      continue-on-error: true
      run: |

        export INGRESS_IP=$(kubectl get service --namespace ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[].ip}')
        echo $INGRESS_IP
        export INGRESS_DOMAIN=${INGRESS_IP}.nip.io

        cat <<EOF | kubectl apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: hubble-ui
          namespace: kube-system
        spec:
          ingressClassName: nginx
          rules:
            - host: hubble.${INGRESS_DOMAIN}
              http:
                paths:
                  - pathType: Prefix
                    backend:
                      service:
                        name: hubble-ui
                        port:
                          number: 80
                    path: /
        ---
        EOF

    - name: Configure Otel Stuff
      if: ${{ github.event.inputs.otel }}
      continue-on-error: true
      run: |

        export INGRESS_IP=$(kubectl get service --namespace ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[].ip}')
        echo $INGRESS_IP
        export INGRESS_DOMAIN=${INGRESS_IP}.nip.io

        cat <<EOF | kubectl apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: otel
          namespace: otel
        spec:
          ingressClassName: nginx
          rules:
            - host: otel.${INGRESS_DOMAIN}
              http:
                paths:
                  - pathType: Prefix
                    backend:
                      service:
                        name: oteldemo-frontendproxy.otel.svc.cluster.local
                        port:
                          number: 8080
                    path: /
        ---
        EOF


    - name: Bill of materials
      continue-on-error: true
      run: |

        export INGRESS_IP=$(kubectl get service --namespace ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[].ip}')
        echo $INGRESS_IP
        export INGRESS_DOMAIN=${INGRESS_IP}.nip.io       
        echo Ingress Host: $INGRESS_DOMAIN Ingress Domain: $INGRESS_DOMAIN
        
        echo http://hubble.${INGRESS_DOMAIN}
        echo http://otel.${INGRESS_DOMAIN}


        kubectl get svc argocd-server -n argocd
        
