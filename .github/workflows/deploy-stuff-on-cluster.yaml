name: Deploy stuff on AKS

on:
  workflow_dispatch: 
    inputs:
      k8sName:
        description: k8sname
        required: true
        type: string
        default: 'abc'

      argocd:
        description: ArgoCD
        required: true
        type: boolean
        default: false

      cilium:
        description: Cilium Grafana
        required: true
        type: boolean
        default: false

      istio:
        description: Istio
        required: true
        type: boolean
        default: false

      testkube:
        description: Testkube
        required: true
        type: boolean
        default: false

      otel:
        description: OpenTelemetry
        required: true
        type: boolean
        default: false

      dqualizer:
        description: dqualizer
        required: true
        type: boolean
        default: false

      ocelot:
        description: ocelot
        required: true
        type: boolean
        default: false

jobs: 
  deploy-stuff-on-cluster:
    runs-on: ubuntu-latest
    steps:
    - name: Echo Something
      run: | 
        echo "Hello, Welt!"
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'

    - name: Display az cli version
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az version

    - name: Get Context
      uses: azure/aks-set-context@v3
      with:
        resource-group: mhsrg-${{ github.event.inputs.k8sName }}
        cluster-name: mhs-${{ github.event.inputs.k8sName }}

    - name: Install ArgoCD
      if: ${{ github.event.inputs.argocd }}
      #continue-on-error: true
      run: |
        echo ${{ github.event.inputs.argocd }}
        kubectl create namespace argocd
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo

    - name: Install Cilium Grafana
      if: ${{ github.event.inputs.cilium }}
      continue-on-error: true
      run: |
        kubectl apply -f https://raw.githubusercontent.com/cilium/cilium/v1.13/examples/kubernetes/addons/prometheus/monitoring-example.yaml   

    - name: Install Istio
      if: ${{ github.event.inputs.istio }}
      continue-on-error: true
      run: |
        curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.17.1 sh -
        istio-1.17.1/bin/istioctl install --set profile=default -y 
        kubectl apply -f istio-1.17.1/samples/addons

    - name: Install TestKube
      if: ${{ github.event.inputs.testkube }}
      continue-on-error: true
      run: |
        wget -qO - https://repo.testkube.io/key.pub | sudo apt-key add - && echo "deb https://repo.testkube.io/linux linux main" | sudo tee -a /etc/apt/sources.list && sudo apt-get update && sudo apt-get install -y testkube
        testkube init

    - name: Install OpenTelemetry Demo
      if: ${{ github.event.inputs.otel }}
      continue-on-error: true
      run: |
        kubectl create namespace otel
        helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
        helm install my-otel-demo-tmp open-telemetry/opentelemetry-demo -n otel  

    - name: Bill of materials
      continue-on-error: true
      run: |
        INGRESS_IP_ISTIO=$(kubectl get service --namespace istio-system istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[].ip}'); echo Istio Ingress: $INGRESS_IP_ISTIO
        KIALI_IP_ISTIO=$(kubectl get service --namespace istio-system kiali -o jsonpath='{.status.loadBalancer.ingress[].ip}'); echo Kiali IP: $KIALI_IP_ISTIO
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo