name: Apps - Deploy tools on AKS

on:
  workflow_dispatch: 
    inputs:
      k8sName:
        description: k8sname
        required: true
        type: string
        #default: 'abc'

      headlamp:
        description: headlamp
        required: true
        type: boolean
        default: true

      skooner:
        description: skooner
        required: true
        type: boolean
        default: false

      argocd:
        description: ArgoCD
        required: true
        type: boolean
        default: false

      prometheus:
        description: Prometheus Grafana
        required: true
        type: boolean
        default: false

      cilium:
        description: Cilium Grafana
        required: true
        type: boolean
        default: false

      istio:
        description: Istio
        required: true
        type: boolean
        default: false

      nginx:
        description: nginx Ingress Controller
        required: true
        type: boolean
        default: false

      testkube:
        description: Testkube
        required: true
        type: boolean
        default: false

      dqualizer:
        description: dqualizer
        required: true
        type: boolean
        default: false

jobs: 
  deploy-stuff-on-cluster:
    runs-on: ubuntu-latest
    steps:
    - name: Echo Something
      run: | 
        echo "Hello, Welt !"
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_PLAYGROUND }}'

    - name: Display az cli version
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az version

    - name: Get Context
      uses: azure/aks-set-context@v3
      with:
        resource-group: mhsrg-${{ github.event.inputs.k8sName }}
        cluster-name: mhs-${{ github.event.inputs.k8sName }}

    - name: Install ArgoCD
      if: ${{ github.event.inputs.argocd == 'true'}}
      #continue-on-error: true
      run: |
        echo ${{ github.event.inputs.argocd }}
        kubectl create namespace argocd
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo

    - name: Install Kube Prometheus Stack
      if: ${{ github.event.inputs.prometheus == 'true'}}
      run: |
        echo ${{ github.event.inputs.prometheus }}
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add stable https://charts.helm.sh/stable
        helm repo update
        helm install prometheus prometheus-community/kube-prometheus-stack -n kube-prometheus-stack --create-namespace

    - name: Install Skooner
      if: ${{ github.event.inputs.skooner == 'true'}}
      #continue-on-error: true
      run: |
        echo ${{ github.event.inputs.skooner }}
        kubectl apply -f https://raw.githubusercontent.com/skooner-k8s/skooner/master/kubernetes-skooner.yaml
        kubectl -n kube-system create serviceaccount skooner-sa
        kubectl create clusterrolebinding skooner-sa --clusterrole=cluster-admin --serviceaccount=kube-system:skooner-sa

    - name: Install Headlamp
      if: ${{ github.event.inputs.headlamp == 'true'}}
      #continue-on-error: true
      run: |
        echo ${{ github.event.inputs.headlamp }}
        kubectl apply -f https://raw.githubusercontent.com/kinvolk/headlamp/main/kubernetes-headlamp.yaml
        kubectl -n kube-system create serviceaccount headlamp-admin
        kubectl create clusterrolebinding headlamp-admin --serviceaccount=kube-system:headlamp-admin --clusterrole=cluster-admin

    - name: Install Cilium Grafana
      if: ${{ github.event.inputs.cilium == 'true'}}
      continue-on-error: true
      run: |
        kubectl apply -f https://raw.githubusercontent.com/cilium/cilium/v1.13/examples/kubernetes/addons/prometheus/monitoring-example.yaml   
        cilium config set --restart=false prometheus.enabled true
        cilium config set --restart=false operator.prometheus.enabled true
        cilium config set --restart=false hubble.enabled true
        cilium config set --restart=false hubble.metrics.enableOpenMetrics true
        cilium config set --restart=false hubble.metrics.enabled "{dns,drop,tcp,flow,port-distribution,icmp,httpV2:exemplars=true;labelsContext=source_ip,source_namespace,source_workload,destination_ip,destination_namespace,destination_workload,traffic_direction}"
        
    - name: Install Istio
      if: ${{ github.event.inputs.istio == 'true'}}
      continue-on-error: true
      run: |
        curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.17.1 sh -
        istio-1.17.1/bin/istioctl install --set profile=default -y 
        kubectl apply -f istio-1.17.1/samples/addons

    - name: Install nginx Ingress Controller
      if: ${{ github.event.inputs.nginx == 'true'}}
      continue-on-error: true
      run: |
        helm upgrade --install ingress-nginx ingress-nginx --repo https://kubernetes.github.io/ingress-nginx --namespace ingress-nginx --create-namespace --set controller.service.externalTrafficPolicy=Local

    - name: Install TestKube
      if: ${{ github.event.inputs.testkube == 'true'}}
      continue-on-error: true
      run: |
        helm repo add kubeshop https://kubeshop.github.io/helm-charts
        helm install testkube kubeshop/testkube -n testkube --create-namespace

    - name: Bill of materials
      continue-on-error: true
      run: |
        INGRESS_IP_ISTIO=$(kubectl get service --namespace istio-system istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[].ip}'); echo Istio Ingress: $INGRESS_IP_ISTIO
        KIALI_IP_ISTIO=$(kubectl get service --namespace istio-system kiali -o jsonpath='{.status.loadBalancer.ingress[].ip}'); echo Kiali IP: $KIALI_IP_ISTIO
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo